{"version":3,"sources":["Recipe.js","navbar.js","RecipeList.js","RecipeApp.js","serviceWorker.js","index.js"],"names":["Recipe","this","props","title","img","instructions","ingredients","map","ing","index","key","className","src","alt","Component","Navbar","RecipeList","recipes","r","defaultProps","RecipeApp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTA2BeA,E,uKAxBD,IAAD,EAC8BC,KAAKC,MAAjCC,EADF,EACEA,MAAOC,EADT,EACSA,IAAKC,EADd,EACcA,aACbC,EAAcL,KAAKC,MAAMI,YAAYC,KAAI,SAACC,EAAKC,GAAN,OAC3C,wBAAIC,IAAKD,GAAQD,MAErB,OACS,yBAAKG,UAAU,YACZ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,yBAAyBC,IAAKR,EAAKS,IAAKV,IAC3D,yBAAKQ,UAAU,aACX,wBAAIA,UAAU,cAAcR,GAC5B,4CACR,4BACKG,GAEL,6CACA,uBAAGK,UAAU,aAAaN,U,GAjBrBS,aCiBNC,G,6KAdP,OACI,gCACI,4BAAI,0CACJ,6BACI,4BAAI,0CACJ,4BAAI,oCACJ,4BAAI,qCACJ,4BAAI,gD,GATHD,cCEfE,G,6KA4BE,IAAMC,EAAUhB,KAAKC,MAAMe,QAAQV,KAAI,SAACW,EAAET,GAAH,OACnC,kBAAC,EAAD,eAAQC,IAAKD,GAAWS,OAG5B,OACI,yBAAKP,UAAU,0BACX,yBAAKA,UAAU,OACdM,Q,GAnCQH,cAAnBE,EACKG,aAAe,CACjBF,QAAS,CACZ,CACEd,MAAO,YACPE,aAAc,+GACdC,YAAa,CAAC,QAAS,eAAgB,mBACvCF,IAAK,iBAEP,CACED,MAAO,YACPE,aAAc,kDACdC,YAAa,CAAC,qBAAsB,iBACpCF,IAAK,iBAEP,CACED,MAAO,gBACPE,aAAc,wFACdC,YAAa,CAAC,oBAAqB,YAAa,yBAA0B,kBAAmB,UAC7FF,IAAK,uBAuBEY,Q,MC9BAI,MATf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2575dd4a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Recipe extends Component {\r\n    render() {\r\n        const {title, img, instructions} = this.props;\r\n        const ingredients = this.props.ingredients.map((ing, index) => (\r\n            <li key={index}>{ing}</li>\r\n        ));\r\n        return (\r\n                 <div className=\"col-md-4\">\r\n                    <div className=\"card card1\">\r\n                        <img className=\"card-img-top img-fluid\" src={img} alt={title} />\r\n                    <div className=\"card-body\">\r\n                        <h3 className=\"card-title\">{title}</h3>\r\n                        <h6>Ingredients:</h6>\r\n                <ul>\r\n                    {ingredients}\r\n                </ul>\r\n                <h6>Instructions:</h6>\r\n                <p className=\"card-text\">{instructions}</p>\r\n            </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recipe;","import React, {Component} from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h2><a>Recipe App</a></h2>\r\n                <nav>\r\n                    <li><a>New Recipe</a></li>\r\n                    <li><a>Home</a></li>\r\n                    <li><a>About</a></li>\r\n                    <li><a>Contact Us</a></li>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./RecipeList.css\";\r\n\r\nclass RecipeList extends Component {\r\n    static defaultProps = {\r\n         recipes: [\r\n      {\r\n        title: \"Spaghetti\",\r\n        instructions: \"Open jar of Spaghetti sauce.  Bring to simmer.  Boil water.  Cook pasta until done.  Combine pasta and sauce\",\r\n        ingredients: [\"pasta\", \"8 cups water\", \"1 box spaghetti\"],\r\n        img: \"spaghetti.jpg\"\r\n      },\r\n      {\r\n        title: \"Milkshake\",\r\n        instructions: \"Combine ice cream and milk.  Blend until creamy\",\r\n        ingredients: [\"2 Scoops Ice cream\", \"8 ounces milk\"],\r\n        img: \"milkshake.jpg\"\r\n      },\r\n      {\r\n        title: \"Avocado Toast\",\r\n        instructions: \"Toast bread.  Slice avocado and spread on bread.  Add salt, oil, and pepper to taste.\",\r\n        ingredients: [\"2 slices of bread\", \"1 avocado\", \"1 tablespoon olive oil\", \"1 pinch of salt\", \"pepper\"],\r\n        img: \"avocado_toast.jpg\"\r\n      }\r\n    ]\r\n    }\r\n    static propTypes = {\r\n        recipes: PropTypes.arrayOf(PropTypes.object)\r\n    }\r\n\r\n    render() {\r\n        const recipes = this.props.recipes.map((r,index) => (\r\n            <Recipe key={index} {...r} />\r\n        ));\r\n\r\n        return (\r\n            <div className=\"container-fluid recipe\">\r\n                <div className=\"row\">\r\n                {recipes}\r\n            </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecipeList;","import React from 'react';\nimport './index.css';\nimport './RecipeApp.css';\nimport Recipe from \"./Recipe\";\nimport Navbar from \"./navbar\";\nimport RecipeList from \"./RecipeList\";\nimport \"./Recipe.css\";\n\nfunction RecipeApp() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <RecipeList />\n    </div>\n  );\n}\n\nexport default RecipeApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './RecipeApp.css';\nimport RecipeApp from './RecipeApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecipeApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}